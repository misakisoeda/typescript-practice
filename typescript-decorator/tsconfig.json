{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es6",                                  /* 設定しないとES３になってしまう */
    // "lib":[                                  /* ライブラリー コメントしておくとtargetによって自動で変わる 基本コメントアウトで良い */
    //   "ES6",
    //   "DOM",
    //   "DOM.Iterable",
    //   "ScriptHost"
    // ],
    // "jsx": "preserve",                                /* Reactの時に使う */
    "experimentalDecorators": true,                   /* 実験的なオプションが使えるようにできる（将来追加される予定の機能が使える） */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./",                                  /* "outDir"を指定してディレクトリ構造を保って欲しいとき 全部のtsファイルを入れてあげないといけない */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* JSをコンパイル対象にするか outDirなどを使ってうまく対処する必要がある */
    // "checkJs": true,                                  /* "allowJs"と一緒に使う必要がある　JSファイルもTSファイルと同じにチェックするか */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* 型定義ファイルを作るか */
    // "declarationMap": true,                           /* d.ts というファイルが作られる プロジェクトのドキュメントみたいなもの */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* TSとJSの架け橋になるmapファイル　ブラウザでTSファイルを見たいとき */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                                   /* JSのコンパイル先を決める  */
    // "removeComments": true,                           /* コメントを消すかどうか */
    // "noEmit": true,                                   /* 何も出力しない（tsファイルの型チェックだけでjsファイルを出力しない） */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* ES5,ES3の時だけ使用　for-of がエラーになる場合がある。その時はtrueへ */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    "noEmitOnError": true,                            /* tsでエラーが起こったらjsファイルを出力しない */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* これをtrueにすると、自動的にL98までtrueになる。下記個別でfalseにすることもできる */
    // "noImplicitAny": true,                            /* 暗黙的なanyを弾く 明示的なanyは通る */
    // "strictNullChecks": true,                         /* 一般的な型はnullやundefinedを含むので、通さなくする */
    // "strictFunctionTypes": true,                      /* Classの継承時に起こりうるバクを防ぐ */
    // "strictBindCallApply": true,                      /* 関数に適用するBind,Call,Applyのメソッド用　引数の型チェックをやってくれる */
    // "strictPropertyInitialization": true,             /* Classを使うときに使用するもの */
    // "noImplicitThis": true,                           /* thisを何を示しているかわからない時にエラーを出す */
    // "useUnknownInCatchVariables": true,               /* 例外捕捉catch(e)のeをunknown型として扱う */
    // "alwaysStrict": true,                             /* "use strict"; を出すか */
    "noUnusedLocals": true,                           /* ローカル変数を使っていない時にエラーを出すか グローバルはエラーにしない（他で使う可能性があるため） */
    "noUnusedParameters": true,                       /* 上記のパラメータ版 */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 暗黙的なreturnにエラーを出す */
    // "noFallthroughCasesInSwitch": true,               /* switch文の時に使える感じ */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  // "include": [  //コンパイルしたいファイル
  //   "index.ts"
  // ],
  // "exclude": [  //コンパイラから省きたいもの、ワイルドカード使える。includeよりも強い設定なので、includeからexcludeで引く感じにする
  //   "**/compiler.ts", //どのディレクトリも省く
  //   "*.spec.ts",
  //   "node_modules"  //一般的な指定（書かなくても設定はされているが、上書きされてしまうため書く必要がる）
  // ],
  // "files": [  //ワイルドカードは使用できない。ファイルだけを設定する。excludeに設定したものでもコンパイルできる
  //   "compiler.ts
  // ]
}
